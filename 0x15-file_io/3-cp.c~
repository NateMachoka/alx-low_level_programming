# include "main.h"

#define BUFFER_SIZE 1024

/**
 * exitWithError - Print an error message and exit with failure code
 * @message: The error message format string
 * @arg: The argument to be included in the error message
 *
 * Return: Nothing
 */
void exitWithError(const char *message, int arg)
{
	dprintf(STDERR_FILENO, message, arg);
	exit(EXIT_FAILURE);
}

/**
 * openSourceFile - Open the source file for reading
 * @fileFrom: The path of the source file
 *
 * Return: The file descriptor of the opened source file
 */
int openSourceFile(const char *fileFrom)
{
	int fdFrom = open(fileFrom, O_RDONLY);

	if (fdFrom == -1)
	{
		exitWithError("Error: Can't read from file %s\n", fileFrom);
	}
	return (fdFrom);
}

/**
 * openDestinationFile - Open the destination file for writing
 * @fileTo: The path of the destination
 *
 * Return: The file descriptor of the opened destination file
 */
int openDestinationFile(const char *fileTo)
{
	int fdTo = open(fileTo, O_WRONLY | O_CREAT | O_TRUNC, S_IRUSR |
			S_IWUSR | S_IRGRP | S_IWGRP | S_IROTH);

	if (fdTo == -1)
	{
		exitWithError("Error: Can't write to %s\n", fileTo);
	}

	return (fdTo);
}

/**
 * copyFileContent - Copy the content from source file to destination file
 * @fdFrom: The file descriptor of the source file
 * @fdTo: The file descriptor of the destination file
 *
 * Return: ...
 */
void copyFileContent(int fdFrom, int fdTo)
{
	char buffer[BUFFER_SIZE];
	ssize_t bytesRead, bytesWritten;

	while ((bytesRead = read(fdFrom, buffer, BUFFER_SIZE)) > 0)
	{
		bytesWritten = write(fdTo, buffer, bytesRead);

		if (bytesWritten == -1)
		{
			exitWithError("Error: Can't write to file\n", "");
		}
	}

	if (bytesRead == -1)
	{
		exitWithError("Error: Can't read from file\n", "");
	}
}

/**
 * closeFile - Close a file descriptor
 * @fd: The file descriptor to close
 *
 * Return: Nothing
 */
void closeFile(int fd)
{
	if (close(fd) == -1)
	{
		exitWithError("Error: Can't close fd %d\n", fd);
	}
}

/**
 * main - Entry point of the program
 * @argc: The argument count
 * @argv: The argument vector
 *
 * Return: 0 on success
 */
int main(int argc, char *argv[])
{
	const char *fileFrom;
	const char *fileTo;
	int fdFrom, fdTo;

	if (argc != 3)
	{
		exitWithError("Usage: cp file_from file_to\n", "");
	}

	fileFrom = argv[1];
	fileTo = argv[2];

	fdFrom = openSourceFile(fileFrom);
	fdTo = openDestinationFile(fileTo);

	copyFileContent(fdFrom, fdTo);

	if (close(fdFrom) == -1)
	{
		exitWithError("Error: Can't close fd %d\n", fdFrom);
	}

	if (close(fdTo) == -1)
	{
		exitWithError("Error: Can't close fd %d\n", fdTo);
	}

	return (0);
}
